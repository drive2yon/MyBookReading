using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace MyBookReading
{
	//sample xml generated by http://webservices.amazon.co.jp/scratchpad/index.html#
	//ResponseGroup: Images,Small

	public class AmazonBookSearch
    {
		private AmazonCresidentials amazonKey;
		private const string MARKET_PLACE_URL = "webservices.amazon.co.jp";
		private const string DESTINATION = "ecs.amazonaws.jp";
		const string END_POINT_JP = "ecs.amazonaws.jp";

        public enum SearchType
        {
            SearchBook_ByTitle,
            SearchBook_ByAuthor,
        }

        public AmazonBookSearch(AmazonCresidentials cresidentials)
        {
            amazonKey = cresidentials;
        }

        public async Task<bool> Search(SearchType searchType, string keyword, ObservableCollection<Book> booksResult)
        {
            string url = makeRequestURL(searchType, keyword);
			System.Diagnostics.Debug.WriteLine(url);
			int retryCount = 0;
			return await VisitUrl(url, booksResult, retryCount);
		}

		private string makeRequestURL(SearchType searchType, string keyWord)
		{
            keyWord = System.Net.WebUtility.UrlEncode(keyWord);

			DateTime now = DateTime.UtcNow;
			string strTime = now.ToString("yyyy-MM-ddTHH:mm:ss.000Z"); // IS0 8601
			strTime = strTime.Replace(":", "%3A");

			System.Text.StringBuilder strBuilder = new System.Text.StringBuilder();

			string PARAM_TIME_STAMP = "&Timestamp=" + strTime.Replace(":", "%3A");
			string PARAM_AWSKEY_AND_TAG = "AWSAccessKeyId=" + amazonKey.access_key_id + "&AssociateTag=" + amazonKey.associate_tag;
            string PARAM_KEYWORD;
			const string PARAM_OPERATION = "&Operation=ItemSearch&ResponseGroup=Images%2CItemAttributes&SearchIndex=Books&Service=AWSECommerceService";
			const string PARAM_VERSION = "&Version=2011-08-01";
			if(searchType == SearchType.SearchBook_ByTitle)
            {
				PARAM_KEYWORD = "&Title=" + keyWord;

				strBuilder.Append("GET\n")
						  .Append(MARKET_PLACE_URL + "\n")
						  .Append("/onca/xml\n")
						  .Append(PARAM_AWSKEY_AND_TAG + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_KEYWORD + PARAM_VERSION);
				string toBeSigned = strBuilder.ToString();
				string signedString = signString(toBeSigned);

				strBuilder.Clear();
				strBuilder.Append("http://")
						  .Append(MARKET_PLACE_URL)
						  .Append("/onca/xml?")
						  .Append(PARAM_AWSKEY_AND_TAG + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_KEYWORD + PARAM_VERSION)
						  .Append("&Signature=" + signedString);
			}
            else
            {
				PARAM_KEYWORD = "&Author=" + keyWord;

				strBuilder.Append("GET\n")
						  .Append(MARKET_PLACE_URL + "\n")
						  .Append("/onca/xml\n")
						  .Append(PARAM_AWSKEY_AND_TAG + PARAM_KEYWORD + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_VERSION);
				string toBeSigned = strBuilder.ToString();
				string signedString = signString(toBeSigned);

				strBuilder.Clear();
				strBuilder.Append("http://")
						  .Append(MARKET_PLACE_URL)
						  .Append("/onca/xml?")
						  .Append(PARAM_AWSKEY_AND_TAG + PARAM_KEYWORD + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_VERSION)
						  .Append("&Signature=" + signedString);
			}
			System.Diagnostics.Debug.WriteLine(PARAM_KEYWORD);

			return strBuilder.ToString();
		}

		string signString(string signMe)
		{
			HmacSha256 hmac = new HmacSha256();
			byte[] hashBytes = hmac.Hash(signMe, amazonKey.secret_access_key);
			string signature = Convert.ToBase64String(hashBytes);
			signature = signature.Replace("/", "%2F").Replace("=", "%3D").Replace("+", "%2B"); // RFC 3986
			return signature;
		}

        protected void parseAmazonResponceXML(XDocument doc, ObservableCollection<Book> booksResult)
        {
			foreach (XElement elemRoot in doc.Root.Elements())
			{
				if (elemRoot.Name.LocalName == "Items")
				{
					foreach (XElement elemItems in elemRoot.Elements())
					{
						if (elemItems.Name.LocalName == "TotalResults")
						{
							//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value );
						}
						else if (elemItems.Name.LocalName == "TotalPages")
						{
							//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value);
						}
						else if (elemItems.Name.LocalName == "MoreSearchResultsUrl")
						{
							//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value);
						}
						else if (elemItems.Name.LocalName == "Item")
						{
                            bool addBook = true;
							Book book = new Book();
							foreach (XElement elemItem in elemItems.Elements())
							{
								if (elemItem.Name.LocalName == "ASIN")
								{
									book.ASIN = elemItem.Value;
								}
								else if (elemItem.Name.LocalName == "DetailPageURL")
								{
									book.AmazonDetailPageURL = elemItem.Value;
								}
								else if (elemItem.Name.LocalName == "SmallImage" ||
										 elemItem.Name.LocalName == "MediumImage" ||
										 elemItem.Name.LocalName == "LargeImage")
								{
									foreach (XElement elemImage in elemItem.Elements())
									{
										if (elemImage.Name.LocalName == "URL")
										{
											if (elemItem.Name.LocalName == "SmallImage")
											{
												book.SmallImageURL = elemImage.Value;
												book.ImageUrl = elemImage.Value;
											}
											else if (elemItem.Name.LocalName == "MediumImage")
											{
												book.MediumImageURL = elemImage.Value;
												book.ImageUrl = elemImage.Value;
											}
											else if (elemItem.Name.LocalName == "LargeImage")
											{
												book.LargeImageURL = elemImage.Value;
												if (book.ImageUrl == null)
												{
													book.ImageUrl = elemImage.Value;
												}
											}
											break;
										}
									}
								}
								else if (elemItem.Name.LocalName == "ItemAttributes")
								{
									foreach (XElement elemItemAttributes in elemItem.Elements())
									{
										if (elemItemAttributes.Name.LocalName == "Author")
										{
											book.Author = elemItemAttributes.Value;
										}
										else if (elemItemAttributes.Name.LocalName == "Manufacturer")
										{
											book.Publisher = elemItemAttributes.Value;
										}
										else if (elemItemAttributes.Name.LocalName == "Title")
										{
											book.Title = elemItemAttributes.Value;
										}
                                        else if (elemItemAttributes.Name.LocalName == "EISBN")
                                        {
											book.ISBN = elemItemAttributes.Value;
										}
										else if (elemItemAttributes.Name.LocalName == "PublicationDate")
										{
											book.PublishedDate = elemItemAttributes.Value;
										}
										else if (elemItemAttributes.Name.LocalName == "Format")
										{
                                            //Kindle除外
                                            if(elemItemAttributes.Value.StartsWith("Kindle", StringComparison.CurrentCulture))
                                            {
                                                addBook = false;
                                                break;
                                            }
										}
									}
								}
							}
                            if (addBook)
                            {
                                booksResult.Add(book);
                            }
						}
					}
				}
			}            
        }

		protected async System.Threading.Tasks.Task<bool> VisitUrl(string url, ObservableCollection<Book> booksResult, int retryCount)
		{
            bool ret = false;
            try
            {
                WebRequest request = WebRequest.Create(url);
				WebResponse response = await request.GetResponseAsync();

				Stream st = response.GetResponseStream();
				StreamReader sr = new StreamReader(st);

				parseAmazonResponceXML(XDocument.Load(sr), booksResult);
				ret = true;
			}
            catch (Exception exception)
            {
                if (exception is System.Net.WebException)
                {
                    HttpWebResponse response = ((System.Net.WebException)exception).Response as HttpWebResponse;
					HttpStatusCode code = (response == null) ? HttpStatusCode.InternalServerError : response.StatusCode;
					System.Diagnostics.Debug.WriteLine("retryCount=" + retryCount.ToString());
					System.Diagnostics.Debug.WriteLine(exception.ToString());

                    const int RETRY_MAX = 3;
                    if(retryCount >= RETRY_MAX)
                    {
                        ret = false;
                    }
                    else
                    {
						retryCount++;
						ret = await VisitUrl(url, booksResult, retryCount);
					}
                }else{
					System.Diagnostics.Debug.WriteLine(exception.ToString());
                    ret = false;
				}
            }
            return ret;
		}
    }
}
