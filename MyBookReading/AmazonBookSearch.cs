using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Net;
using System.Xml.Linq;
using Newtonsoft.Json;

namespace MyBookReading
{
	//sample xml generated by http://webservices.amazon.co.jp/scratchpad/index.html#
	//ResponseGroup: Images,Small

	public class AmazonBookSearch
    {
		private AmazonCresidentials amazonKey;
		private const string MARKET_PLACE_URL = "webservices.amazon.co.jp";
		private const string DESTINATION = "ecs.amazonaws.jp";
		const string END_POINT_JP = "ecs.amazonaws.jp";

        public AmazonBookSearch(AmazonCresidentials cresidentials)
        {
            amazonKey = cresidentials;
        }

		public void Search(string keyword, ObservableCollection<Book> booksResult)
		{
			string url = makeRequestURL(keyword);
			VisitUrl(url, booksResult);
		}

		private string makeRequestURL(string keyWord)
		{
            keyWord = System.Net.WebUtility.UrlEncode(keyWord);

			DateTime now = DateTime.UtcNow;
			string strTime = now.ToString("yyyy-MM-ddTHH:mm:ss.000Z"); // IS0 8601
			strTime = strTime.Replace(":", "%3A");

			string PARAM_TIME_STAMP = "&Timestamp=" + strTime.Replace(":", "%3A");
			string PARAM_AWSKEY_AND_TAG = "AWSAccessKeyId=" + amazonKey.access_key_id + "&AssociateTag=" + amazonKey.associate_tag;
			string PARAM_KEYWORD = "&Keywords=" + keyWord;
			const string PARAM_OPERATION = "&Operation=ItemSearch&ResponseGroup=Images%2CSmall&SearchIndex=Books&Service=AWSECommerceService";
			const string PARAM_VERSION = "&Version=2011-08-01";

			System.Text.StringBuilder strBuilder = new System.Text.StringBuilder();
			strBuilder.Append("GET\n")
					  .Append(MARKET_PLACE_URL + "\n")
					  .Append("/onca/xml\n")
					  .Append(PARAM_AWSKEY_AND_TAG + PARAM_KEYWORD + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_VERSION);
			string toBeSigned = strBuilder.ToString();
			string signedString = signString(toBeSigned);

			string requestUrl = "http://" + MARKET_PLACE_URL + "/onca/xml?" + PARAM_AWSKEY_AND_TAG + PARAM_KEYWORD + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_VERSION + "&Signature=" + signedString;
			strBuilder.Clear();
			strBuilder.Append("http://")
					  .Append(MARKET_PLACE_URL)
					  .Append("/onca/xml?")
					  .Append(PARAM_AWSKEY_AND_TAG + PARAM_KEYWORD + PARAM_OPERATION + PARAM_TIME_STAMP + PARAM_VERSION)
					  .Append("&Signature=" + signedString);
			bool test = strBuilder.ToString().Equals(requestUrl);
			return strBuilder.ToString();
		}

		string signString(string signMe)
		{
			HmacSha256 hmac = new HmacSha256();
			byte[] hashBytes = hmac.Hash(signMe, amazonKey.secret_access_key);
			string signature = Convert.ToBase64String(hashBytes);
			signature = signature.Replace("/", "%2F").Replace("=", "%3D").Replace("+", "%2B"); // RFC 3986
			return signature;
		}

		protected static async void VisitUrl(string url, ObservableCollection<Book> booksResult)
		{
            try
            {
                WebRequest request = WebRequest.Create(url);
                WebResponse response = await request.GetResponseAsync();

                Stream st = response.GetResponseStream();
                StreamReader sr = new StreamReader(st);

                XDocument doc = XDocument.Load(sr);
                foreach( XElement elemRoot in doc.Root.Elements() )
                {
					if(elemRoot.Name.LocalName == "Items")
                    {
                        foreach (XElement elemItems in elemRoot.Elements())
                        {
                            if (elemItems.Name.LocalName == "TotalResults")
                            {
								//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value );
							}
                            else if (elemItems.Name.LocalName == "TotalPages")
                            {
								//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value);
							}
                            else if (elemItems.Name.LocalName == "MoreSearchResultsUrl")
                            {
								//System.Diagnostics.Debug.WriteLine(elemItems.Name.LocalName + " Value=" + elemItems.Value);
							}
							else if (elemItems.Name.LocalName == "Item")
							{
                                Book book = new Book();
								foreach (XElement elemItem in elemItems.Elements())
                                {
                                    if (elemItem.Name.LocalName == "ASIN")
                                    {
                                        book.ASIN = elemItem.Value;
                                    }
                                    else if (elemItem.Name.LocalName == "DetailPageURL")
                                    {
                                        book.AmazonDetailPageURL = elemItem.Value;
                                    }
                                    else if (elemItem.Name.LocalName == "SmallImage" ||
                                             elemItem.Name.LocalName == "MediumImage" ||
                                             elemItem.Name.LocalName == "LargeImage")
                                    {
                                        foreach (XElement elemImage in elemItem.Elements())
                                        {
                                            if (elemImage.Name.LocalName == "URL")
                                            {
                                                if (elemItem.Name.LocalName == "SmallImage" )
                                                {
													book.SmallImageURL = elemImage.Value;
                                                    book.ImageUrl = elemImage.Value;
												}
                                                else if( elemItem.Name.LocalName == "MediumImage" )
                                                {
													book.MediumImageURL = elemImage.Value;
                                                    if (book.ImageUrl == null)
                                                    {
                                                        book.ImageUrl = elemImage.Value;
                                                    }
                                                }
                                                else if( elemItem.Name.LocalName == "LargeImage" )
                                                {
													book.LargeImageURL = elemImage.Value;
                                                    if(book.ImageUrl == null)
                                                    {
														book.ImageUrl = elemImage.Value;
													}
												}
                                                break;
                                            }
                                        }
                                    }
									else if (elemItem.Name.LocalName == "ItemAttributes")
									{
                                        foreach (XElement elemItemAttributes in elemItem.Elements())
                                        {
                                            if (elemItemAttributes.Name.LocalName == "Author")
                                            {
                                                book.Author = elemItemAttributes.Value;
                                            }
                                            else if (elemItemAttributes.Name.LocalName == "Manufacturer")
                                            {
                                                book.Publisher = elemItemAttributes.Value;
                                            }
                                            else if (elemItemAttributes.Name.LocalName == "Title")
                                            {
                                                book.Title = elemItemAttributes.Value;
                                            }
                                        }
									}
								}
                                booksResult.Add(book);
							}
                        }
                    }
				}
			}
            catch (Exception exception)
            {
                if (exception is System.Net.WebException)
                {
                    HttpWebResponse response = ((System.Net.WebException)exception).Response as HttpWebResponse;
					HttpStatusCode code = (response == null) ? HttpStatusCode.InternalServerError : response.StatusCode;
                    System.Diagnostics.Debug.WriteLine(exception.ToString());
					//DoErrorHandling();
                }else{
					System.Diagnostics.Debug.WriteLine(exception.ToString());
				}
            }
		}
    }
}
